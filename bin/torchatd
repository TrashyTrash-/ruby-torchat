#! /usr/bin/env ruby
require 'optparse'
require 'torchat'

options = {}

OptionParser.new do |o|
	options[:config] = File.expand_path '~/.torchat/torchat.yml'
	options[:host]   = '127.0.0.1'
	options[:port]   = 11110

	o.on '-c', '--config PATH', 'the path to the config file' do |path|
		options[:config] = path
	end

	o.on '-h', '--host HOST', 'the host to listen on' do |ip|
		options[:host] = ip
	end

	o.on '-p', '--port PORT', 'the port to listen on' do |port|
		options[:port] = port
	end

	o.on '-P', '--password PASSWORD' do |password|
		options[:password] = password
	end

	o.on '-s', '--ssl KEY:CERT', 'the private key and cert files' do |path|
		options[:ssl] = { key: path.split(':').first, cert: path.split(':').last }
	end
end.parse!

%w[INT KILL].each {|sig|
	trap sig do
		puts 'torchatd stopping, bye'

		EM.stop_event_loop
	end
}

class Torchatd
	class Connection < EventMachine::Protocols::LineAndTextProtocol
		attr_accessor :daemon, :host, :port, :ssl

		def authorized?; @authorized; end

		def authorize!
			@authorized = true

			send_response 'AUTHORIZED'
		end

		def receive_line (line)
			return if line.lstrip.empty?

			@daemon.process self, line.lstrip
		end

		def send_response (text)
			send_data "#{text.to_s.lstrip}\n"
		end

		def unbind
			@daemon.connections.delete self
		end
	end

	attr_reader   :connections, :password
	attr_accessor :profile

	def initialize (password = nil)
		@password = password

		@connections = []

		yield self if block_given?
	end

	def start (host, port, ssl = nil)
		return if @started

		@started = true

		@signature = EM.start_server host, port, Connection do |conn|
			@connections << conn

			conn.daemon = self
			conn.host   = host
			conn.port   = port
			conn.ssl    = ssl

			unless @password
				conn.authorize!
			end
		end
	end

	def stop
		EM.stop_server @signature

		@started = false
	end

	def process (connection, line)
		command, rest = line.split(' ', 2)

		case command.downcase.to_sym
		when :starttls
			if connection.ssl
				connection.start_tls(private_key_file: connection.ssl[:key], cert_chain_file: connection.ssl[:cert])
			else
				connection.start_tls
			end

			return

		when :pass
			connection.authorize! if @password == rest

			return
		end

		unless connection.authorized?
			connection.send_response "UNAUTHORIZED #{command}"
			return
		end

		case command.downcase.to_sym
		when :list
			connection.send_response "LIST #{profile.buddies.keys.join(' ')}"

		when :remove
			profile.remove_buddy rest

		when :add
			profile.add_buddy rest

		when :status
			if Torchat::Protocol.valid_address?(rest)
				if buddy = profile.buddies[rest]
					connection.send_response "#{rest} STATUS #{buddy.status}"
				end
			else
				profile.status = rest
			end

		when :client
			if buddy = profile.buddies[rest]
				if buddy.client.name
					connection.send_response "#{rest} CLIENT_NAME #{buddy.client.name}" 
				end

				if buddy.client.version
					connection.send_response "#{rest} CLIENT_VERSION #{buddy.client.version}"
				end
			end

		when :name
			if Torchat::Protocol.valid_address?(rest)
				if buddy = profile.buddies[rest]
					connection.send_response "#{rest} NAME #{buddy.name}"
				end
			else
				profile.name = rest
			end

		when :description
			if Torchat::Protocol.valid_address?(rest)
				if buddy = profile.buddies[rest]
					connection.send_response "#{rest} DESCRIPTION #{buddy.description}"
				end
			else
				profile.description = rest
			end

		when :message
			profile.send_message_to *rest.split(' ', 2)

		else
			connection.send_response "UNIMPLEMENTED #{command}"
		end
	rescue => e
		Torchat.debug e
	end

	def received (packet)
		return unless connected?

		if packet.type == :message
			send_everyone "#{packet.from.id} MESSAGE #{packet}"
		elsif packet.type == :status
			send_everyone "#{packet.from.id} STATUS #{packet}"
		elsif packet.type == :client
			send_everyone "#{packet.from.id} CLIENT_NAME #{packet}"
		elsif packet.type == :version
			send_everyone "#{packet.from.id} CLIENT_VERSION #{packet}"
		elsif packet.type == :profile_name && !packet.to_s.empty?
			send_everyone "#{packet.from.id} NAME #{packet}"
		elsif packet.type == :profile_text && !packet.to_s.empty?
			send_everyone "#{packet.from.id} DESCRIPTION #{packet}"
		elsif packet.type == :remove_me
			send_everyone "#{packet.from.id} REMOVE"
		end
	end

	def connected?; @connected; end

	def connected (buddy)
		send_everyone "#{buddy.id} CONNECTED"

		@connected = true

		send_everyone "#{buddy.id} NAME #{buddy.name}"               if buddy.name
		send_everyone "#{buddy.id} DESCRIPTION #{buddy.description}" if buddy.description

		if buddy.client.name
			send_everyone "#{buddy.id} CLIENT_NAME #{buddy.client.name}"
		end

		if buddy.client.version
			send_everyone "#{buddy.id} CLIENT_VERSION #{buddy.client.version}"
		end
	end

	def disconnected (buddy)
		send_everyone "#{buddy.id} DISCONNECTED"

		@connected = false
	end

	def removed (buddy)
		send_everyone "#{buddy.id} REMOVE"
	end

	def send_everyone (text, even_unauthorized = false)
		@connections.each {|connection|
			next unless connection.authorized? || even_unauthorized

			connection.send_response text
		}
	end
end

EM.run {
	Torchatd.new(options[:password]) {|d|
		(d.profile = Torchat.new(options[:config])).start {|s|
			s.on :incoming do |incoming|
				Torchat.debug "incoming connection from #{incoming}"
			end

			s.on :outgoing do |outgoing|
				Torchat.debug "outgoing connection to #{outgoing}"
			end

			s.on :connection do |buddy|
				Torchat.debug "#{buddy.id} connected"
			end

			s.on :verification do |buddy|
				Torchat.debug "#{buddy.id} has been verified"
			end

			s.when :ready do |buddy|
				d.connected buddy
			end

			s.when :removed do |buddy|
				d.removed buddy
			end

			s.on :disconnection do |buddy|
				Torchat.debug "#{buddy.id} disconnected"

				d.disconnected buddy
			end

			%w(message status client version profile_name profile_text add_me remove_me).each {|type|
				s.on type do |packet|
					d.received packet
				end
			}
		}
	}.start(options[:host], options[:port], options[:ssl])

	puts 'torchatd started'
}
