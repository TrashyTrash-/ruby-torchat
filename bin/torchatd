#! /usr/bin/env ruby
require 'optparse'
require 'torchat'

options = {}

OptionParser.new do |o|
	options[:host] = '127.0.0.1'
	options[:port] = 11110

	o.on '-p', '--profile NAME', 'the profile name' do |name|
		options[:profile] = name
	end

	o.on '-c', '--config PATH', 'the path to the config file' do |path|
		options[:config] = path
	end

	o.on '-g', '--generate [PATH]', 'the path to save the generated torrc' do |path|
		options[:generate] = path || '-'
	end

	o.on '-t', '--tor', 'enable automatic generation and run of Tor' do
		options[:tor] = true
	end

	o.on '-l', '--listen HOST:PORT', 'the host and port to listen on' do |value|
		host, port = value.split(':')

		options[:host] = host      if host
		options[:port] = port.to_i if port
	end

	o.on '-s', '--ssl KEY:CERT', 'the private key and cert files' do |path|
		options[:ssl] = { key: path.split(':').first, cert: path.split(':').last }
	end

	o.on '-P', '--password PASSWORD' do |password|
		options[:password] = password
	end

	o.on '-o', '--online' do
		options[:online] = true
	end

	o.on '-d', '--debug [LEVEL=1]', 'enable debug mode' do |value|
		ENV['DEBUG'] = value || ?1
	end
end.parse!

class Torchatd
	class Connection < EventMachine::Protocols::LineAndTextProtocol
		attr_accessor :daemon, :host, :port, :ssl

		def authorized?; @authorized;        end
		def authorize!;  @authorized = true; end

		def receive_line (line)
			return if line.lstrip.empty?

			@daemon.process self, line.lstrip
		end

		def send_response (text)
			send_data "#{text.to_s.lstrip}\n"
		end

		def unbind
			@daemon.connections.delete self
		end
	end

	attr_reader   :connections, :password
	attr_accessor :profile, :tor

	def initialize (password = nil)
		@password    = password
		@buddies     = []
		@connections = []

		yield self if block_given?
	end

	def start (host, port, ssl = nil)
		return if @started

		@started = true

		@signature = EM.start_server host, port, Connection do |conn|
			@connections << conn

			conn.daemon = self
			conn.host   = host
			conn.port   = port
			conn.ssl    = ssl

			unless @password
				conn.authorize!
			end
		end
	end

	def stop
		EM.stop_server @signature

		profile.stop
		tor.stop if tor
	end

	def process (connection, line)
		command, rest = line.force_encoding('UTF-8').split(' ', 2)

		case command.downcase.to_sym
		when :starttls
			if connection.ssl
				connection.start_tls(private_key_file: connection.ssl[:key], cert_chain_file: connection.ssl[:cert])
			else
				connection.start_tls
			end

			return

		when :pass
			if !@password || @password == rest
				connection.authorize!
				connection.send_response "AUTHORIZED #{profile.session.id}"
			end

			return
		end

		unless connection.authorized?
			connection.send_response "UNAUTHORIZED #{command}"
			return
		end

		case command.downcase.to_sym
		when :list
			connection.send_response "LIST #{profile.buddies.keys.join(' ')}"

		when :remove
			profile.buddies.remove rest

		when :add
			attribute, rest = rest.split(' ')

			if rest && attribute == 'tmp'
				profile.buddies.add_temporary rest
			else
				profile.buddies.add attribute
			end

		when :typing
			id, mode = rest.split(' ')

			if buddy = profile.buddies[id]
				buddy.send_typing(mode)
			end

		when :status
			if rest && (Torchat::Tor.valid_address?(rest) || Torchat::Tor.valid_id?(rest))
				if buddy = profile.buddies[rest]
					connection.send_response "#{rest} STATUS #{buddy.status}"
				end
			else
				profile.status = rest
			end

		when :client
			if buddy = profile.buddies[rest]
				if buddy.client.name
					connection.send_response "#{rest} CLIENT_NAME #{buddy.client.name}"
				end

				if buddy.client.version
					connection.send_response "#{rest} CLIENT_VERSION #{buddy.client.version}"
				end
			end

		when :name
			if rest && (Torchat::Tor.valid_address?(rest) || Torchat::Tor.valid_id?(rest))
				if buddy = profile.buddies[rest]
					connection.send_response "#{rest} NAME #{buddy.name}"
				end
			else
				profile.name = rest
			end

		when :description
			if rest && (Torchat::Tor.valid_address?(rest) || Torchat::Tor.valid_id?(rest))
				if buddy = profile.buddies[rest]
					connection.send_response "#{rest} DESCRIPTION #{buddy.description}"
				end
			else
				profile.description = rest
			end

		when :message
			profile.send_message_to *rest.split(' ', 2)

		when :block
			profile.buddies[rest].block!

		when :allow
			profile.buddies[rest].allow!

		else
			connection.send_response "UNIMPLEMENTED #{command}"
		end
	rescue => e
		Torchat.debug e
	end

	def received_packet (packet)
		return unless @buddies.include? packet.from

		if packet.type == :message
			packet.to_s.lines.each {|line|
				send_everyone "#{packet.from.id} MESSAGE #{line}"
			}
		elsif packet.type == :status
			send_everyone "#{packet.from.id} STATUS #{packet}"
		elsif packet.type == :client
			send_everyone "#{packet.from.id} CLIENT_NAME #{packet}"
		elsif packet.type == :version
			send_everyone "#{packet.from.id} CLIENT_VERSION #{packet}"
		elsif packet.type == :profile_name && !packet.nil?
			send_everyone "#{packet.from.id} NAME #{packet}"
		elsif packet.type == :profile_text && !packet.nil?
			send_everyone "#{packet.from.id} DESCRIPTION #{packet}"
		elsif packet.type == :remove_me
			send_everyone "#{packet.from.id} REMOVE"
		end
	end

	def typing (buddy, mode)
		send_everyone "#{buddy.id} TYPING #{mode}"
	end

	def connected?; @connected; end

	def connected (buddy)
		@buddies << buddy

		send_everyone "#{buddy.id} CONNECTED"

		send_everyone "#{buddy.id} NAME #{buddy.name}"               if buddy.name
		send_everyone "#{buddy.id} DESCRIPTION #{buddy.description}" if buddy.description

		if buddy.client.name
			send_everyone "#{buddy.id} CLIENT_NAME #{buddy.client.name}"
		end

		if buddy.client.version
			send_everyone "#{buddy.id} CLIENT_VERSION #{buddy.client.version}"
		end
	end

	def disconnected (buddy)
		return unless @buddies.include? buddy

		send_everyone "#{buddy.id} DISCONNECTED"

		@buddies.delete buddy
	end

	def removed (buddy)
		return unless @buddies.include? buddy

		send_everyone "#{buddy.id} REMOVE"
	end

	def send_everyone (text, even_unauthorized = false)
		@connections.each {|connection|
			next unless connection.authorized? || even_unauthorized

			connection.send_response text
		}
	end
end

EM.run {
	Torchatd.new(options[:password]) {|d|
		d.profile = options[:config] ? Torchat.new(options[:config]) : Torchat.profile(options[:profile])

		if options[:generate]
			if options[:generate] == '-'
				print d.profile.tor.rc
			else
				File.open(options[:generate], 'w') { |f| f.print d.profile.tor.rc }
			end

			exit
		end

		puts 'torchatd starting...'

		if options[:tor]
			d.profile.tor.file = 'torrc.txt'

			d.profile.tor.start "#{d.profile.path || '~/.torchat'}/Tor", -> {
				abort 'could not load the onion id' if 20.times {
					break if File.exists? 'hidden_service/hostname'

					sleep 1
				}
			}, -> {
				abort 'tor exited with errors'
			}
		end

		unless d.profile.config['id']
			if d.profile.path
				if File.readable?("#{d.profile.path}/Tor/hidden_service/hostname")
					d.profile.config['id'] = File.read("#{d.profile.path}/Tor/hidden_service/hostname")[/^(.*?)\.onion/, 1]
				end
			end or abort 'could not deduce the onion id'
		end

		puts "torchatd started for #{d.profile.config['id']}"

		%w[INT KILL].each {|sig|
			trap sig do
				puts 'torchatd stopping...'

				d.stop

				EM.stop_event_loop
			end
		}

		d.profile.start {|s|
			s.when :connecting_to do |e|
				Torchat.debug "connecting to #{e.address}:#{e.port}"
			end

			s.on :failed_connection do |e|
				Torchat.debug "#{e.buddy.id} failed to connect"
			end

			s.on :connection do |e|
				Torchat.debug "#{e.buddy.id} connected"
			end

			s.on :verification do |e|
				Torchat.debug "#{e.buddy.id} has been verified"
			end

			s.when :ready do |e|
				d.connected e.buddy
			end

			s.on :removal do |e|
				d.removed e.buddy
			end

			s.on :disconnection do |e|
				Torchat.debug "#{e.buddy.id} disconnected"

				d.disconnected e.buddy
			end

			s.on_packet do |e|
				d.received_packet e.packet
			end

			s.on :typing do |e|
				d.typing e.buddy, e.mode
			end

			s.online! if options[:online]
		}
	}.start(options[:host], options[:port], options[:ssl])
}
